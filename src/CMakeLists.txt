PROJECT(LIGGGHTS C CXX)
CMAKE_MINIMUM_REQUIRED(VERSION 3.5.0)

SET(LIGGGHTS_MAJOR_VERSION 3)
SET(LIGGGHTS_MINOR_VERSION 8)
SET(LIGGGHTS_PATCH_VERSION 0)
SET(LIGGGHTS_VERSION ${LIGGGHTS_MAJOR_VERSION}.${LIGGGHTS_MINOR_VERSION}.${LIGGGHTS_PATCH_VERSION})

IF(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7.0.0)
  SET(CMAKE_CXX_STANDARD 14)
ELSE()
  SET(CMAKE_CXX_STANDARD 17)
ENDIF()
SET(CMAKE_CXX_STANDARD_REQUIRED ON)

IF (NOT CMAKE_CXX_FLAGS)
  IF(CMAKE_COMPILER_IS_GNUCXX)
    SET(CMAKE_CXX_FLAGS "-O2 -funroll-loops -fstrict-aliasing -Wall -Wextra -Wno-uninitialized -Wno-literal-suffix -fPIC")
  ENDIF()
ENDIF()

FILE(GLOB SOURCES *.cpp)
FILE(GLOB HEADERS *.h)

IF(WIN32)
  INCLUDE_DIRECTORIES(WINDOWS/extra)
  ADD_DEFINITIONS(-D_USE_MATH_DEFINES -DNOMINMAX)

  IF(MSVC)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /bigobj")
  ENDIF()

  FIND_PACKAGE(Cygwin REQUIRED)

  ADD_CUSTOM_TARGET(GenerateHeaders
           COMMAND GenerateHeaders.bat ${CYGWIN_INSTALL_PATH}
           WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/WINDOWS)
  # enable parallelization
  foreach(flag_var
          CMAKE_C_FLAGS_RELEASE CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO
          CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
            set(${flag_var} "${${flag_var}} /MP4")
  endforeach()
ELSE()
  ADD_CUSTOM_TARGET(GenerateHeaders
           COMMAND sh Make.sh style
           COMMAND sh Make.sh models
           WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
ENDIF()

ADD_LIBRARY(liggghts_obj OBJECT ${SOURCES})
ADD_DEPENDENCIES(liggghts_obj GenerateHeaders)

ADD_LIBRARY(liggghts_static STATIC $<TARGET_OBJECTS:liggghts_obj>)
SET_TARGET_PROPERTIES(liggghts_static PROPERTIES OUTPUT_NAME liggghts)
SET_PROPERTY(TARGET liggghts_static PROPERTY PUBLIC_HEADER ${HEADERS})

ADD_LIBRARY(liggghts_shared SHARED $<TARGET_OBJECTS:liggghts_obj>)
SET_TARGET_PROPERTIES(liggghts_shared PROPERTIES OUTPUT_NAME liggghts)
SET_PROPERTY(TARGET liggghts_shared PROPERTY PUBLIC_HEADER ${HEADERS})

ADD_EXECUTABLE(liggghts_bin $<TARGET_OBJECTS:liggghts_obj>)
SET_TARGET_PROPERTIES(liggghts_bin PROPERTIES OUTPUT_NAME liggghts)

#=======================================

FIND_PACKAGE(VTK NO_MODULE)

IF(VTK_FOUND)
  INCLUDE(${VTK_USE_FILE})
  ADD_DEFINITIONS(-DLAMMPS_VTK)
  TARGET_LINK_LIBRARIES(liggghts_static ${VTK_LIBRARIES})
  TARGET_LINK_LIBRARIES(liggghts_shared ${VTK_LIBRARIES})
  TARGET_LINK_LIBRARIES(liggghts_bin ${VTK_LIBRARIES})
  MESSAGE(STATUS "Found VTK: version " ${VTK_VERSION})
ELSE(VTK_FOUND)
  MESSAGE(WARNING "VTK NOT found!")
ENDIF(VTK_FOUND)

#=======================================

FIND_PACKAGE(JPEG)

IF(JPEG_FOUND)
  INCLUDE_DIRECTORIES(${JPEG_INCLUDE_DIR})
  ADD_DEFINITIONS(-DLAMMPS_JPEG)
  TARGET_LINK_LIBRARIES(liggghts_static jpeg)
  TARGET_LINK_LIBRARIES(liggghts_shared jpeg)
  TARGET_LINK_LIBRARIES(liggghts_bin jpeg)
ELSE(JPEG_FOUND)
  MESSAGE(WARNING "JPEG NOT found!")
ENDIF(JPEG_FOUND)

#=======================================

FIND_PACKAGE(MPI)

IF(MPI_FOUND)
  INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})
  TARGET_LINK_LIBRARIES(liggghts_static ${MPI_LIBRARIES})
  TARGET_LINK_LIBRARIES(liggghts_shared ${MPI_LIBRARIES})
  TARGET_LINK_LIBRARIES(liggghts_bin ${MPI_LIBRARIES})

  IF(MPI_COMPILE_FLAGS)
    SET_TARGET_PROPERTIES(liggghts_static PROPERTIES COMPILE_FLAGS "${MPI_COMPILE_FLAGS}")
    SET_TARGET_PROPERTIES(liggghts_shared PROPERTIES COMPILE_FLAGS "${MPI_COMPILE_FLAGS}")
    SET_TARGET_PROPERTIES(liggghts_bin PROPERTIES COMPILE_FLAGS "${MPI_COMPILE_FLAGS}")
  ENDIF()

  IF(MPI_LINK_FLAGS)
    SET_TARGET_PROPERTIES(liggghts_static PROPERTIES LINK_FLAGS "${MPI_LINK_FLAGS}")
    SET_TARGET_PROPERTIES(liggghts_shared PROPERTIES LINK_FLAGS "${MPI_LINK_FLAGS}")
    SET_TARGET_PROPERTIES(liggghts_bin PROPERTIES LINK_FLAGS "${MPI_LINK_FLAGS}")
  ENDIF()
ELSE(MPI_FOUND)
  MESSAGE(WARNING "MPI NOT found! Using MPI Stubs instead.")
  ADD_SUBDIRECTORY(STUBS)
  TARGET_LINK_LIBRARIES(liggghts_static mpi_stubs)
  TARGET_LINK_LIBRARIES(liggghts_shared mpi_stubs)
  TARGET_LINK_LIBRARIES(liggghts_bin mpi_stubs)
ENDIF(MPI_FOUND)

#=======================================

FIND_PACKAGE(JPEG)

IF(JPEG_FOUND)
  INCLUDE_DIRECTORIES(${JPEG_INCLUDE_DIR})
  ADD_DEFINITIONS(-DLAMMPS_JPEG)
  TARGET_LINK_LIBRARIES(liggghts_static jpeg)
  TARGET_LINK_LIBRARIES(liggghts_shared jpeg)
  TARGET_LINK_LIBRARIES(liggghts_bin jpeg)
ELSE(JPEG_FOUND)
  MESSAGE(WARNING "JPEG NOT found!")
ENDIF(JPEG_FOUND)

#=======================================

FIND_PACKAGE(PNG)

IF(PNG_FOUND)
  INCLUDE_DIRECTORIES(${PNG_INCLUDE_DIR})
  ADD_DEFINITIONS(-DLAMMPS_PNG)
  TARGET_LINK_LIBRARIES(liggghts_static ${PNG_LIBRARY})
  TARGET_LINK_LIBRARIES(liggghts_shared ${PNG_LIBRARY})
  TARGET_LINK_LIBRARIES(liggghts_bin ${PNG_LIBRARY})
ELSE(PNG_FOUND)
  MESSAGE(WARNING "PNG NOT found!")
ENDIF(PNG_FOUND)

#=======================================

find_path(AVCODEC_INCLUDE_DIR libavcodec/avcodec.h)
find_library(AVCODEC_LIBRARY avcodec)

find_path(AVFORMAT_INCLUDE_DIR libavformat/avformat.h)
find_library(AVFORMAT_LIBRARY avformat)

find_path(AVUTIL_INCLUDE_DIR libavutil/avutil.h)
find_library(AVUTIL_LIBRARY avutil)

IF((NOT AVCODEC_INCLUDE_DIR-NOTFOUND)
  AND (NOT AVFORMAT_INCLUDE_DIR-NOTFOUND)
  AND (NOT AVUTIL_INCLUDE_DIR-NOTFOUND)
  AND (NOT AVCODEC_LIBRARY-NOTFOUND)
  AND (NOT AVFORMAT_LIBRARY-NOTFOUND)
  AND (NOT AVUTIL_LIBRARY-NOTFOUND)
)
  INCLUDE_DIRECTORIES(${AVCODEC_INCLUDE_DIR} ${AVFORMAT_INCLUDE_DIR} ${AVUTIL_INCLUDE_DIR})
  ADD_DEFINITIONS(-DLAMMPS_FFMPEG)
  TARGET_LINK_LIBRARIES(liggghts_static ${AVCODEC_LIBRARY} ${AVFORMAT_LIBRARY} ${AVUTIL_LIBRARY})
  TARGET_LINK_LIBRARIES(liggghts_shared ${AVCODEC_LIBRARY} ${AVFORMAT_LIBRARY} ${AVUTIL_LIBRARY})
  TARGET_LINK_LIBRARIES(liggghts_bin ${AVCODEC_LIBRARY} ${AVFORMAT_LIBRARY} ${AVUTIL_LIBRARY})
  MESSAGE(STATUS "FFMPEG found!")
ELSE()
  MESSAGE(WARNING "FFMPEG NOT found!")
ENDIF()

#=======================================

FIND_PROGRAM(GZIP "gzip")

IF(GZIP)
  ADD_DEFINITIONS(-DLAMMPS_GZIP)
  MESSAGE(STATUS "GZIP found!")
ELSE(GZIP)
  MESSAGE(WARNING "GZIP NOT found!")
ENDIF(GZIP)

# custom defines from doc/source not complete:
# -DLAMMPS_MEMALIGN
# -DLAMMPS_XDR
# -DLAMMPS_SMALLBIG
# -DLAMMPS_BIGBIG
# -DLAMMPS_SMALLSMALL
# -DLAMMPS_LONGLONG_TO_LONG
# -DPACK_ARRAY
# -DPACK_POINTER
# -DPACK_MEMCPY
# -DSUPERQUADRIC_ACTIVE_FLAG
# -DNONSPHERICAL_ACTIVE_FLAG

INSTALL(TARGETS liggghts_bin liggghts_static liggghts_shared
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib
        PUBLIC_HEADER DESTINATION include)
IF (WIN32)
    INSTALL(DIRECTORY WINDOWS DESTINATION include)
ENDIF()

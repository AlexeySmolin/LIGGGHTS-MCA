PROJECT(LIGGGHTS C CXX)
CMAKE_MINIMUM_REQUIRED(VERSION 3.5.0)

SET(LIGGGHTS_MAJOR_VERSION 3)
SET(LIGGGHTS_MINOR_VERSION 8)
SET(LIGGGHTS_PATCH_VERSION 0)
SET(LIGGGHTS_VERSION ${LIGGGHTS_MAJOR_VERSION}.${LIGGGHTS_MINOR_VERSION}.${LIGGGHTS_PATCH_VERSION})

# TODO:
# https://www.cfdem.com/media/DEM/docu/Section_start.html#making-liggghts-r-public
# -DFFT_FFTW2
# -DFFT_FFTW3
# -DLAMMPS_MEMALIGN
# -DLAMMPS_XDR
# -DPACK_ARRAY
# -DPACK_POINTER
# -DPACK_MEMCPY

# TODO:
# generate models from cmake like: https://github.com/schrummy14/LIGGGHTS_Flexible_Fibers/blob/master/src/WINDOWS/CMake_patch.zip

SET(ENABLED_OPTIONS "")
SET(DISABLED_OPTIONS "")

OPTION(DISABLE_ALL "Disable all features (OFF by default)" OFF)
OPTION(ENABLE_ALL  "Enable all features (OFF by default)"  OFF)

SET(DEFAULT_ON ON CACHE INTERNAL "Default ON value for enabled by default options")
SET(DEFAULT_OFF OFF CACHE INTERNAL "Default OFF value for disabled by default options")

IF(DISABLE_ALL)
  SET(DEFAULT_ON OFF)
ENDIF()

IF(ENABLE_ALL)
  SET(DEFAULT_OFF ON)
ENDIF()

# libraries/programs 
OPTION(ENABLE_VTK    "Use dump_vtk" ${DEFAULT_ON})
OPTION(ENABLE_JPEG   "Use libjpeg"  ${DEFAULT_OFF})
OPTION(ENABLE_PNG    "Use libpng"   ${DEFAULT_OFF})
OPTION(ENABLE_FFMPEG "Use ffmpeg"   ${DEFAULT_OFF})
OPTION(ENABLE_GZIP   "Use gzip"     ${DEFAULT_OFF})
OPTION(ENABLE_MPI    "Use MPI"      ${DEFAULT_ON})

OPTION(ENABLE_SQ  "Use Superquadrics" ${DEFAULT_OFF})

OPTION(ENABLE_SMALLBIG   "Use of 4-byte (small) vs 8-byte (big) integers."        ON)
OPTION(ENABLE_BIGBIG     "Huge molecular systems with more than 2 billion atoms." OFF)
OPTION(ENABLE_SMALLSMALL "Machine does not support 64-bit integers."              OFF)

OPTION(ENABLE_LONGLONG_TO_LONG "System does not recognize “long long” data types." OFF)

#=======================================
IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  IF(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7.0.0)
    SET(CMAKE_CXX_STANDARD 14)
  ELSE()
    SET(CMAKE_CXX_STANDARD 17)
  ENDIF()
  SET(CMAKE_CXX_STANDARD_REQUIRED ON)  

  SET(OPT_CXX_FLAGS "")
  MESSAGE(STATUS "Compiler: clang")
ELSEIF(("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU"))
  IF(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7.0.0)
    SET(CMAKE_CXX_STANDARD 14)
  ELSE()
    SET(CMAKE_CXX_STANDARD 17)
  ENDIF()
  SET(CMAKE_CXX_STANDARD_REQUIRED ON)

  SET(OPT_CXX_FLAGS "-O2 -ffast-math -funroll-loops -fstrict-aliasing -Wall -Wextra -Wno-uninitialized -Wno-literal-suffix -fPIC")
  MESSAGE(STATUS "Compiler: gcc")
ELSEIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
	SET(OPT_CXX_FLAGS "-O3 -funroll-loops -fstrict-aliasing -W -Wno-uninitialized -march=native -xHost")
  MESSAGE(STATUS "Compiler: intel")
ELSEIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
  SET(OPT_CXX_FLAGS "/O2 /bigobj")

  ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS -D_USE_MATH_DEFINES -DNOMINMAX)
  ADD_DEFINITIONS("/wd4101 /wd4244 /wd4267")

  MESSAGE(STATUS "Compiler: msvc")
ENDIF()

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OPT_CXX_FLAGS}")

IF(WIN32)
  INCLUDE_DIRECTORIES(WINDOWS/extra)

  FIND_PACKAGE(Cygwin REQUIRED)

  ADD_CUSTOM_TARGET(GenerateHeaders
    COMMAND GenerateHeaders.bat ${CYGWIN_INSTALL_PATH}
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/WINDOWS
  )
  # enable parallelization
  FOREACH(flag_var
    CMAKE_C_FLAGS_RELEASE CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO
    CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
    SET(${flag_var} "${${flag_var}} /MP4")
  ENDFOREACH()
ELSE()
  ADD_CUSTOM_TARGET(GenerateHeaders
    COMMAND sh Make.sh style
    COMMAND sh Make.sh models
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
ENDIF()

#=======================================
FILE(GLOB SOURCES *.cpp)
FILE(GLOB HEADERS *.h)

ADD_LIBRARY(liggghts_obj OBJECT ${SOURCES})
ADD_DEPENDENCIES(liggghts_obj GenerateHeaders)

ADD_LIBRARY(liggghts_static STATIC $<TARGET_OBJECTS:liggghts_obj>)
SET_TARGET_PROPERTIES(liggghts_static PROPERTIES OUTPUT_NAME liggghts)
SET_PROPERTY(TARGET liggghts_static PROPERTY PUBLIC_HEADER ${HEADERS})

ADD_LIBRARY(liggghts_shared SHARED $<TARGET_OBJECTS:liggghts_obj>)
SET_TARGET_PROPERTIES(liggghts_shared PROPERTIES OUTPUT_NAME liggghts)
SET_PROPERTY(TARGET liggghts_shared PROPERTY PUBLIC_HEADER ${HEADERS})

ADD_EXECUTABLE(liggghts_bin $<TARGET_OBJECTS:liggghts_obj>)
SET_TARGET_PROPERTIES(liggghts_bin PROPERTIES OUTPUT_NAME liggghts)

#=======================================
IF(ENABLE_MPI)
  FIND_PACKAGE(MPI)

  IF(MPI_FOUND)
    INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})
    TARGET_LINK_LIBRARIES(liggghts_static ${MPI_LIBRARIES})
    TARGET_LINK_LIBRARIES(liggghts_shared ${MPI_LIBRARIES})
    TARGET_LINK_LIBRARIES(liggghts_bin ${MPI_LIBRARIES})

    IF(MPI_COMPILE_FLAGS)
      SET_TARGET_PROPERTIES(liggghts_static PROPERTIES COMPILE_FLAGS "${MPI_COMPILE_FLAGS}")
      SET_TARGET_PROPERTIES(liggghts_shared PROPERTIES COMPILE_FLAGS "${MPI_COMPILE_FLAGS}")
      SET_TARGET_PROPERTIES(liggghts_bin PROPERTIES COMPILE_FLAGS "${MPI_COMPILE_FLAGS}")
    ENDIF()

    IF(MPI_LINK_FLAGS)
      SET_TARGET_PROPERTIES(liggghts_static PROPERTIES LINK_FLAGS "${MPI_LINK_FLAGS}")
      SET_TARGET_PROPERTIES(liggghts_shared PROPERTIES LINK_FLAGS "${MPI_LINK_FLAGS}")
      SET_TARGET_PROPERTIES(liggghts_bin PROPERTIES LINK_FLAGS "${MPI_LINK_FLAGS}")
    ENDIF()

    SET(ENABLED_OPTIONS "${ENABLED_OPTIONS} MPI")
  ELSE()
    MESSAGE(FATAL_ERROR "MPI NOT found!")
  ENDIF()
ELSE()
  SET(DISABLED_OPTIONS "${DISABLED_OPTIONS} MPI")
  MESSAGE(STATUS "Using MPI stubs")
ENDIF()

#=======================================
IF(ENABLE_VTK)
  FIND_PACKAGE(VTK NO_MODULE)

  IF(VTK_FOUND)
    INCLUDE(${VTK_USE_FILE})
    ADD_DEFINITIONS(-DLAMMPS_VTK)
    TARGET_LINK_LIBRARIES(liggghts_static ${VTK_LIBRARIES})
    TARGET_LINK_LIBRARIES(liggghts_shared ${VTK_LIBRARIES})
    TARGET_LINK_LIBRARIES(liggghts_bin ${VTK_LIBRARIES})

    SET(ENABLED_OPTIONS "${ENABLED_OPTIONS} VTK")

    MESSAGE(STATUS "Found VTK: version " ${VTK_VERSION})
  ELSE()
    MESSAGE(FATAL_ERROR "VTK NOT found!")
  ENDIF()
ELSE()
  SET(DISABLED_OPTIONS "${DISABED_OPTIONS} VTK")
ENDIF()

#=======================================
IF(ENABLE_JPEG)
  FIND_PACKAGE(JPEG)

  IF(JPEG_FOUND)
    INCLUDE_DIRECTORIES(${JPEG_INCLUDE_DIR})
    ADD_DEFINITIONS(-DLAMMPS_JPEG)
    TARGET_LINK_LIBRARIES(liggghts_static jpeg)
    TARGET_LINK_LIBRARIES(liggghts_shared jpeg)
    TARGET_LINK_LIBRARIES(liggghts_bin jpeg)
    SET(ENABLED_OPTIONS "${ENABLED_OPTIONS} JPEG")
  ELSE()
    MESSAGE(FATAL_ERROR "JPEG NOT found!")
  ENDIF()
ELSE()
  SET(DISABLED_OPTIONS "${DISABLED_OPTIONS} JPEG")
ENDIF()

#=======================================
IF(ENABLE_PNG)
  FIND_PACKAGE(PNG)

  IF(PNG_FOUND)
    INCLUDE_DIRECTORIES(${PNG_INCLUDE_DIR})
    ADD_DEFINITIONS(-DLAMMPS_PNG)
    TARGET_LINK_LIBRARIES(liggghts_static ${PNG_LIBRARY})
    TARGET_LINK_LIBRARIES(liggghts_shared ${PNG_LIBRARY})
    TARGET_LINK_LIBRARIES(liggghts_bin ${PNG_LIBRARY})
    SET(ENABLED_OPTIONS "${ENABLED_OPTIONS} PNG")
  ELSE()
    MESSAGE(FATAL_ERROR "PNG NOT found!")
  ENDIF()
ELSE()
  SET(DISABLED_OPTIONS "${DISABLED_OPTIONS} PNG")
ENDIF()

#=======================================
IF(ENABLE_FFMPEG)
  FIND_PATH(AVCODEC_INCLUDE_DIR libavcodec/avcodec.h)
  FIND_LIBRARY(AVCODEC_LIBRARY avcodec)

  FIND_PATH(AVFORMAT_INCLUDE_DIR libavformat/avformat.h)
  FIND_LIBRARY(AVFORMAT_LIBRARY avformat)

  FIND_PATH(AVUTIL_INCLUDE_DIR libavutil/avutil.h)
  FIND_LIBRARY(AVUTIL_LIBRARY avutil)

  IF((NOT AVCODEC_INCLUDE_DIR-NOTFOUND)
    AND (NOT AVFORMAT_INCLUDE_DIR-NOTFOUND)
    AND (NOT AVUTIL_INCLUDE_DIR-NOTFOUND)
    AND (NOT AVCODEC_LIBRARY-NOTFOUND)
    AND (NOT AVFORMAT_LIBRARY-NOTFOUND)
    AND (NOT AVUTIL_LIBRARY-NOTFOUND)
  )
    INCLUDE_DIRECTORIES(${AVCODEC_INCLUDE_DIR} ${AVFORMAT_INCLUDE_DIR} ${AVUTIL_INCLUDE_DIR})
    ADD_DEFINITIONS(-DLAMMPS_FFMPEG)
    TARGET_LINK_LIBRARIES(liggghts_static ${AVCODEC_LIBRARY} ${AVFORMAT_LIBRARY} ${AVUTIL_LIBRARY})
    TARGET_LINK_LIBRARIES(liggghts_shared ${AVCODEC_LIBRARY} ${AVFORMAT_LIBRARY} ${AVUTIL_LIBRARY})
    TARGET_LINK_LIBRARIES(liggghts_bin ${AVCODEC_LIBRARY} ${AVFORMAT_LIBRARY} ${AVUTIL_LIBRARY})
    
    SET(ENABLED_OPTIONS "${ENABLED_OPTIONS} FFMPEG")
    
    MESSAGE(STATUS "FFMPEG found!")
  ELSE()
    MESSAGE(FATAL_ERROR "FFMPEG NOT found!")
  ENDIF()
ELSE()
  SET(DISABLED_OPTIONS "${DISABLED_OPTIONS} FFMPEG")
ENDIF()

#=======================================
IF(ENABLE_GZIP)
  FIND_PROGRAM(GZIP "gzip")

  IF(GZIP)
    ADD_DEFINITIONS(-DLAMMPS_GZIP)

    SET(ENABLED_OPTIONS "${ENABLED_OPTIONS} GZIP")

    MESSAGE(STATUS "GZIP found!")
  ELSE()
    MESSAGE(FATAL_ERROR "GZIP NOT found!")
  ENDIF()
ELSE()
  SET(DISABLED_OPTIONS "${DISABLED_OPTIONS} GZIP")
ENDIF()

#=======================================
IF(ENABLE_SQ)
  FIND_PACKAGE(Boost)

  IF(Boost_FOUND)
    INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})
    ADD_DEFINITIONS(-DSUPERQUADRIC_ACTIVE_FLAG -DNONSPHERICAL_ACTIVE_FLAG)
    TARGET_LINK_LIBRARIES(liggghts_static ${Boost_LIBRARY})
    TARGET_LINK_LIBRARIES(liggghts_shared ${Boost_LIBRARY})
    TARGET_LINK_LIBRARIES(liggghts_bin ${Boost_LIBRARY})

    SET(ENABLED_OPTIONS "${ENABLED_OPTIONS} SQ")

    MESSAGE(STATUS "Using Superquadrics")
  ELSE()
    MESSAGE(FATAL_ERROR "Boost NOT found!")
  ENDIF()
ELSE()
  SET(DISABLED_OPTIONS "${DISABLED_OPTIONS} SQ")
ENDIF()

#=======================================
IF(ENABLE_SMALLBIG)
  ADD_DEFINITIONS(-DLAMMPS_SMALLBIG)
  SET(ENABLED_OPTIONS "${ENABLED_OPTIONS} SMALLBIG")
ELSEIF(ENABLE_BIGBIG)
  ADD_DEFINITIONS(-DLAMMPS_BIGBIG)
  SET(ENABLED_OPTIONS "${ENABLED_OPTIONS} BIGBIG")
ELSEIF(ENABLE_SMALLSMALL)
  ADD_DEFINITIONS(-DLAMMPS_SMALLSMALL)
  SET(ENABLED_OPTIONS "${ENABLED_OPTIONS} SMALLSMALL")
ELSE()
  ADD_DEFINITIONS(-DLAMMPS_SMALLBIG)
  SET(ENABLED_OPTIONS "${ENABLED_OPTIONS} SMALLBIG")
ENDIF()

IF(ENABLE_LONGLONG_TO_LONG)
  ADD_DEFINITIONS(-DLAMMPS_LONGLONG_TO_LONG)
  SET(ENABLED_OPTIONS "${ENABLED_OPTIONS} LONGLONG_TO_LONG")
ENDIF()

#=======================================

# FIXME: gets overwritten 
STRING(TIMESTAMP BUILD_TIME "%Y-%m-%d %H:%M:%S")
EXECUTE_PROCESS(
  COMMAND git log -1 --format=%H
  WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
  OUTPUT_VARIABLE GIT_HASH
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
FILE(WRITE version_liggghts.h
  "#define LIGGGHTS_VERSION \"LIGGGHTS-PUBLIC ${LIGGGHTS_VERSION}, "
  "compiled ${BUILD_TIME} by $ENV{USER}, git commit ${GIT_HASH}, "
  "build configuration: ${ENABLED_OPTIONS}\""
)

#=======================================
MESSAGE(STATUS "=======================================")
MESSAGE(STATUS "liggghts ${LIGGGHTS_VERSION}")
MESSAGE(STATUS "Enabled options: ${ENABLED_OPTIONS}")
MESSAGE(STATUS "Disabled options: ${DISABLED_OPTIONS}")
MESSAGE(STATUS "=======================================")

#=======================================
INSTALL(TARGETS liggghts_bin liggghts_static liggghts_shared
  RUNTIME DESTINATION bin
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
  PUBLIC_HEADER DESTINATION include)
IF (WIN32)
  INSTALL(DIRECTORY WINDOWS DESTINATION include)
ENDIF()